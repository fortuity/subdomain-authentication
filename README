Subdomain-Authentication

This is a Ruby on Rails web application that uses subdomains and provides user management and authentication. 

Tutorial (Walkthrough)

Each step that you must follow to create this application is documented here.

Assumptions

This tutorial is based on Rails 2.3. Some of the code shown here will not work in older versions of Rails. 

This was written before the release of Rails 3.0. Things will change significantly in Rails 3.0 so this tutorial will be outdated when Rails 3.0 is released.

Before beginning this tutorial, you need to install 

* The Ruby language ruby (version 1.8.7 or newer)
* The RubyGems packaging system (version 1.3.5 or newer)
* A working installation of SQLite (preferred), MySQL, or PostgreSQL
* Rails (version 2.3 or newer)

Check that current versions are installed on your computer:

ruby -v
gem -v
rails -v

You should have experience building a simple Rails application. Refer to http://guides.rubyonrails.org/ (Rails Guides) for help if you are a beginner.

Create the Rails Application

Open a terminal, navigate to a folder where you have rights to create files, and type:

$ rails subdomain-authentication

You may give the app a different name if you are building it for your own use. For this tutorial, we'll assume the name is "subdomain-authentication."

This will create a Rails application that uses a SQLite database for data storage. You may also use MySQL or PostgreSQL for data storage (refer to http://guides.rubyonrails.org/getting_started.html (Getting Started with Rails)).

After you create the application, switch to its folder to continue work directly in that application:

$ cd subdomain-authentication

Edit the README file to remove the standard Rails boilerplate. Add what you like (at least the name of the app).

Set Up Source Control (Git)

If you're creating an app for deployment into production, you'll want to set up a source control repository at this point. If you are building a throw-away app for your own education, you may skip this step.

Check that git is installed on your computer:

git version

Create a top, project-level .gitignore file containing:

.DS_Store
log/*.log
tmp/**/*
config/database.yml
config/initializers/site_keys.rb
db/*.sqlite3

Initialize git and check in your first commit:

git init
git add .
git commit -m 'initial commit'

You can check your commit status at any time with:

git status

At this point you can check your local project into a remote source control repository. We'll assume you are using git with an account at GitHub.

Check that your GitHub account is set up properly:

ssh git@github.com

Go to GitHub and create a new empty repository into which you can push your local git repo:

http://github.com/repositories/new

Add GitHub as a remote repository for your project and push your local project to the remote repository:

git remote add origin git@github.com:YOUR_GITHUB_ACCOUNT/YOUR_PROJECT_NAME.git
git push origin master

At each stage of completion, you should check your code into your local repository:

git commit -a -m "some helpful comment" 

and then push it to the remote repository:

git push origin master

Required Gems

The application uses the following gems:

haml (version 2.2.17)
will_paginate (version 2.3.12)
formtastic (version 0.9.7)
devise (version 0.9.1)
warden (version 0.9.0)
inherited_resources (version 1.0.2)
subdomain_routes (version 0.3.1))
friendly_id (version 2.2.7)

Install Gems

You can check which gems are installed on your computer with:

gem list --local

If any gems need updating, you can update all with 

sudo gem update

or individually, as in this example:

sudo gem update haml
sudo gem update will_paginate
sudo gem update formtastic
sudo gem update devise
sudo gem update warden
sudo gem update inherited_resources
sudo gem update subdomain_routes
sudo gem update friendly_id

If they are not already installed, install the required gems on your computer:

sudo gem install haml
sudo gem install will_paginate
sudo gem install formtastic
sudo gem install devise
sudo gem install warden
sudo gem install inherited_resources
sudo gem install subdomain_routes
sudo gem install friendly_id

Keep in mind that you have installed these gems locally. When you deploy the app to another server, the same gems (and versions) must be available.

Specify the Required Gems

Modify the environment.rb file to specify the required gems:

# Specifies gem version of Rails to use when vendor/rails is not present
RAILS_GEM_VERSION = '2.3.4' unless defined? RAILS_GEM_VERSION

# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')

Rails::Initializer.run do |config|
	config.gem 'haml', :lib => 'haml', :version => '>=2.2.17'
	config.gem 'will_paginate', :source => 'http://gemcutter.org', :version => '>= 2.3.12'
	config.gem 'formtastic', :source => 'http://gemcutter.org/', :version => '>= 0.9.7'
	config.gem 'devise', :source => 'http://gemcutter.org/', :version => '>= 0.9.1'
	config.gem 'warden', :source => 'http://gemcutter.org/', :version => '>= 0.9.0'
	config.gem "inherited_resources", :lib => "inherited_resources", :source => "http://gemcutter.org/",:version => '>= 1.0.2'
	config.gem "subdomain_routes", :source => "http://gemcutter.org", :version => '>= 0.3.1'
	config.gem 'friendly_id', :version => '>= 2.2.7'
		
	config.time_zone = 'UTC'
end

Create a Gems Manifest for Heroku

If you're going to be deploying your app to the Heroku hosted platform, this is an opportune time to create a gems manifest for Heroku. If you do not intend to deploy to Heroku, you can skip this step.

Create a top, project-level .gems file containing:

haml --version '>= 2.2.17'
will_paginate --version '>= 2.3.12' --source http://gemcutter.org
formtastic --version '>= 0.9.7' --source http://gemcutter.org
devise --version '>= 0.9.1' --source http://gemcutter.org
warden --version '>= 0.9.0' --source http://gemcutter.org
inherited_resources --version '>= 1.0.2' --source http://gemcutter.org
subdomain_routes --version '>= 0.3.1' --source http://gemcutter.org
friendly_id --version '>= 2.2.7'

You can check that your app runs properly by entering the command

script/server 

To see your application in action, open a browser window and navigate to http://localhost:3000. You should see the Rails default information page.

Stop the server with Control-C.

Add Stylesheets

You might wait until after you've built your application to begin applying CSS styling to your pages. Or you can do it now and your pages will look more visually appealing during development.

This application uses HAML and its companion SASS to to mark up pages for layout and CSS styling. We also use the formtastic gem in conjunction with a SASS version of formtastic to mark up forms. The SASS version of formtastic is available here: http://github.com/activestylus/formtastic-sass.

Create a directory for the SASS files:

mkdir public/stylesheets/sass

and add SASS stylesheet files for formtastic styling:

http://github.com/activestylus/formtastic-sass/blob/master/_formtastic_base.sass
http://github.com/activestylus/formtastic-sass/blob/master/_skintastic.sass
http://github.com/activestylus/test_formtastic_sass/blob/master/public/stylesheets/sass/_scaffold.sass

Create a master application SASS file. Here's one you can use to get started:

http://github.com/activestylus/test_formtastic_sass/blob/master/public/stylesheets/sass/application.sass

Be sure you've imported the formtastic SASS files by adding this at the beginning of the master application SASS file:

@import scaffold.sass
@import formtastic_base.sass
@import skintastic.sass

You can refer to http://github.com/activestylus/formtastic-sass for instructions on modifying the styling of forms.

When you launch your web app, HAML will automatically generate an application.css file from the component SASS files.

Enable Haml

To enable Haml for the application, run:

haml --rails .

(Be sure to include the trailing dot to specify the path to the current directory.)

This will create a Haml plugin in "vendor/plugins". After Haml is initialized, all view files with the ".html.haml" extension will be compiled using Haml.

Create an Application Layout

Create a application layout default view:

app/views/layouts/application.html.haml

This will be the default layout for every page in the application.

Add a layout helper file:

app/helpers/layout_helper.rb

This provides some simple helper methods for page title and stylesheet includes.

Create a Home Page

Create the first page of the application. Use the Rails generate command to create a "home" controller and a "views/home/index" page.

script/generate controller home index

There's no option in Rails 2.3.4 to generate Haml instead of erb view files, so you will have to delete:

app/views/home/index.html.erb

and add:

app/views/home/index.html.haml

containing only: 

- title 'Subdomain-Authentication'

Now, you have to set a route to your home page. Edit the file config/routes.rb and add:

map.root :controller => "home"

Remove the index.html File

Delete the default page from your application:

$ rm public/index.html

While you are here, you may also want to modify the file public/robots.txt to prevent indexing by search engines if you plan to have a development version on a publicly accessible server:

# To ban all spiders from the entire site uncomment the next two lines:
User-Agent: *
Disallow: /

You can check that your app runs properly by entering the command

script/server 

Open a browser window and navigate to http://localhost:3000. You should see the new home page. Stop the server with Control-C.



